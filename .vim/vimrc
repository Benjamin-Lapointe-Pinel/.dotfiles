set nocompatible
set t_Co=256
set hidden
set encoding=UTF-8
set clipboard^=unnamed,unnamedplus

let textwidth=160
let &textwidth=textwidth

set linebreak
set breakindent
set breakindentopt+=shift:-2
set showbreak=├\ 
set listchars=space:.,tab:->,nbsp:█,trail:█,eol:$,precedes:<,extends:>

set smartindent
set shiftwidth=2
set tabstop=2
set softtabstop=2
set smarttab
set expandtab

set number relativenumber
set showmatch
set showcmd
set signcolumn=yes

set wildmenu
set wildmode=longest:full,full
set completeopt+=noinsert,menuone,preview

set splitbelow
set splitright

set foldmethod=syntax
set nofoldenable
set foldlevel=1
set viewoptions+=localoptions
set sessionoptions+=localoptions

set complete+=k
set colorcolumn=0
set undofile
set nomore

filetype plugin indent on
syntax on

set mouse=a
augroup no_cursor_move_on_focus
	au!
	au FocusLost * let g:oldmouse=&mouse | set mouse=
	au FocusGained * if exists('g:oldmouse') | let &mouse=g:oldmouse | unlet g:oldmouse | endif
augroup END

" https://github.com/vim/vim/blob/3c01c4a02897163996639f6f2604c68eab2bd18b/runtime/defaults.vim#L109-L123
augroup vimStartup
  au!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END

highlight clear SpellBad
highlight SpellBad cterm=underline ctermfg=red
highlight clear SpellCap
highlight SpellCap cterm=underline ctermfg=red
highlight clear SpellRare
highlight SpellRare cterm=underline ctermfg=green
highlight clear SpellLocal
highlight SpellLocal cterm=underline ctermfg=blue
highlight Pmenu ctermbg=gray
highlight ColorColumn ctermbg=18

highlight StatusLineNC ctermfg=darkgray
highlight User1 ctermbg=1 ctermfg=white cterm=bold
highlight User2 ctermbg=2 ctermfg=white cterm=bold
highlight User3 ctermbg=3 ctermfg=white cterm=bold
highlight User4 ctermbg=4 ctermfg=white cterm=bold
highlight User5 ctermbg=5 ctermfg=black cterm=bold
highlight User6 ctermbg=6 ctermfg=white cterm=bold
highlight User7 ctermbg=7 ctermfg=black cterm=bold
highlight User8 ctermbg=16 ctermfg=white cterm=bold

set statusline=
set statusline+=%{%b:gitbranch%}
set statusline+=%<%{%GetFileName()%}
set statusline+=%{&readonly?'\ \ ':''}%{strlen(&ft)?join(['\ ',toupper(&ft)]):''}\ [%{&ff}][%{strlen(&fenc)?&fenc:'none'}][%{&spelllang}]▕
set statusline+=\ %=\ ▕\ %{wordcount().words}\ words\ %5(%l%):%-3(%v%)\ %3(%p%)%%\ 
set statusline+=%@ToggleQuickFix@%{%GetQuickFixNumber()%}%T

function! GetFileName()
  let filename = expand("%:~:.")
  if len(filename) == 0
    return ''
  endif
  let filename = ' '.filename.'▕'
  if getbufinfo(bufnr('%'))[0].changed
    let filename = '%4*'.filename.'%*'
  endif
  return filename
endfunction

function! GetQuickFixNumber()
  let quickfix_number = len(getqflist())
  if quickfix_number > 0
    return '%3* Q ' . quickfix_number . ' %*'
  endif
  return ''
endfunction

function! ToggleQuickFix(minwid, number_of_clicks, mouse_button, modifier) abort
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction

function! StatuslineGitBranch()
  let b:gitbranch=" "
  if &modifiable
    try
      let l:dir=expand('%:p:h')
      let l:gitrevparse = system("git -C ".l:dir." rev-parse --abbrev-ref HEAD")
      if !v:shell_error
        let b:gitbranch="%2* ".substitute(l:gitrevparse, '\n', '', 'g')." %*"
      endif
    catch
    endtry
  endif
endfunction

augroup GetGitBranch
  autocmd!
  autocmd VimEnter,WinEnter,BufEnter * call StatuslineGitBranch()
augroup END

" navigate windows from any mode
tnoremap <M-h> <C-\><C-N><C-w>h
tnoremap <M-j> <C-\><C-N><C-w>j
tnoremap <M-k> <C-\><C-N><C-w>k
tnoremap <M-l> <C-\><C-N><C-w>l
inoremap <M-h> <C-\><C-N><C-w>h
inoremap <M-j> <C-\><C-N><C-w>j
inoremap <M-k> <C-\><C-N><C-w>k
inoremap <M-l> <C-\><C-N><C-w>l
nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l
tnoremap <M-left>  <C-\><C-N><C-w>h
tnoremap <M-down>  <C-\><C-N><C-w>j
tnoremap <M-up>    <C-\><C-N><C-w>k
tnoremap <M-right> <C-\><C-N><C-w>l
inoremap <M-left>  <C-\><C-N><C-w>h
inoremap <M-down>  <C-\><C-N><C-w>j
inoremap <M-up>    <C-\><C-N><C-w>k
inoremap <M-right> <C-\><C-N><C-w>l
nnoremap <M-left>  <C-w>h
nnoremap <M-down>  <C-w>j
nnoremap <M-up>    <C-w>k
nnoremap <M-right> <C-w>l

" terminal
tnoremap <Esc> <C-\><C-n>
nnoremap <C-\> :vertical terminal<CR>
tnoremap <C-\> exit<CR>

" miscellaneous
nnoremap gb :ls<CR>:b 
nnoremap <C-space> :set list! list?<CR>
nnoremap <F5> :w<CR>:!%:p<CR>
nnoremap <C-s> :setlocal spell!<CR>
inoremap <c-space> <c-n>
" https://stackoverflow.com/a/1037182
nnoremap <silent> <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" file explorer
let g:netrw_liststyle = 3
let g:netrw_banner = 0
map <C-E> :Lexplore<CR>

augroup auto_save_view
  autocmd!
  " autocmd BufWinLeave * set spellfile& " needed for spellcheck to work with view?
  autocmd BufWinLeave * silent! mkview
  autocmd BufWinEnter * silent! loadview
augroup END

" https://peps.python.org/pep-0350/
command! -nargs=1 Codetags silent vimgrep /TODO\|FIXME\|BUG\|NOBUG\|RFE\|IDEA\|HACK\||CAVEAT\|NOTE\|FAQ\|SEE\|TODOC\|CRED\|RVD/j <args>

autocmd BufNewFile,BufRead *.ino set filetype=arduino
autocmd BufNewFile,BufRead docker-compose.{yaml,yml} set filetype=docker-compose
autocmd BufRead,BufNewFile *.md set filetype=markdown

autocmd FileType tex,plaintex,gitcommit,markdown setlocal spell
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType python compiler pylint
autocmd FileType python nnoremap <buffer> <F4> :w<CR>:make %<CR>
autocmd FileType tex,plaintex nnoremap <F4> :w<CR>:VimtexCompile<CR>
autocmd FileType dockerfile nnoremap <buffer> <F4> :wa<CR>:!docker build -t build . && docker run --rm -it $(docker build -q .)<CR>
autocmd FileType docker-compose nnoremap <buffer> <F4> :wa<CR>:!docker-compose down; docker-compose up -d<CR>
autocmd FileType arduino nnoremap <buffer> <F4> :wa<CR>:!arduino -v --upload %<CR>
autocmd FileType java match ColorColumn /\%160v/

" https://vim.fandom.com/wiki/Automatically_open_the_quickfix_window_on_:make
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

let g:indentLine_char = '│'
let g:indentLine_setConceal = 0

packadd termdebug
let g:termdebug_wide = 1

let g:vimtex_view_method = 'zathura'
let g:vimtex_syntax_conceal_disable = 1

set rtp+=/usr/bin/fzf

" These lines must be at the very end of the vimrc file.
" packloadall breaks nvim plugin loading
" packloadall
silent! helptags ALL
